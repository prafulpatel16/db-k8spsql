name: 'Fashion Shop App PostgreSQL Image Build with Tag'

on: 
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  fashion-app-psql-image:
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Download the latest DB backup to initialize
      - name: Download Latest DB Backup to Initialize
        run: |
          latest_s3_db=$(aws s3 ls s3://fashionapp-dbbackup/db/ --recursive | sort | tail -n 1 | awk '{print $4}')
          aws s3 cp s3://fashionapp-dbbackup/db/$latest_s3_db scripts/db.sql

      # Step 4: Log in to Amazon ECR private registry
      - name: Login to Amazon ECR private registry
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 5: Set VERSION variable from tag
      - name: Set VERSION variable from tag
        run: |
          VERSION=${{ github.ref_name }}
          echo "VERSION=${VERSION#v}" >> $GITHUB_ENV

      # Step 6: Build, tag, and push the image to AWS ECR private registry
      - name: Build, tag, and push the image to AWS ECR private registry
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          VERSION: ${{ env.VERSION }}
        run: |
          docker build -t $ECR_REPOSITORY:$VERSION .
          echo "Pushing image to ECR..."
          docker push $ECR_REPOSITORY:$VERSION
